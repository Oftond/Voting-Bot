import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import BaseMiddleware
from keyboard import keyboard
from logger import logger
from datetime import datetime, timedelta
import config
import asyncpg
import sys

class UserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        if isinstance(event, types.Message):
            user_id = event.from_user.id
            data['user_id'] = user_id
        
        # –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        elif isinstance(event, types.CallbackQuery):
            user_id = event.from_user.id
            data['user_id'] = user_id
            
        return await handler(event, data)

class bothandler:
    class PollCreation(StatesGroup):
        waiting_for_title = State()
        waiting_for_options = State()
        waiting_for_duration = State()

    class Voting(StatesGroup):
        choosing_poll = State()
        choosing_option = State()

    class PollManagement(StatesGroup):
        choosing_poll = State()
        confirm_action = State()

    def __init__(self):
        self.BOT_TOKEN = os.getenv("BOT_TOKEN")
        self.DB_USER = os.getenv("DB_USER")
        self.DB_PASSWORD = os.getenv("DB_PASSWORD")
        self.DB_NAME = os.getenv("DB_NAME")
        self.DB_HOST = os.getenv("DB_HOST")
        self.DB_PORT = os.getenv("DB_PORT")

        if not self.BOT_TOKEN:
            print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env")
            sys.exit(1)

        self.bot = Bot(token=self.BOT_TOKEN)
        self.dp = Dispatcher()
        self._register_handlers()
        self.active_polls = {}
        self.archived_polls = {}

        self.pool = None

    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL."""
        self.pool = await asyncpg.create_pool(
            user=self.DB_USER,
            password=self.DB_PASSWORD,
            database=self.DB_NAME,
            host=self.DB_HOST,
            port=self.DB_PORT
        )

    async def close_db(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å PostgreSQL."""
        await self.pool.close()

    def _register_handlers(self):
        self.dp.message.middleware.register(UserMiddleware())  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware

        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.handle_delete, F.text == "–£–¥–∞–ª–∏—Ç—å/–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
        self.dp.message.register(self.handle_create_poll, F.text == "–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
        self.dp.message.register(self.handle_vote, F.text == "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å")
        self.dp.message.register(self.handle_statistika, F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.dp.message.register(self.handle_help, F.text == "–°–ø—Ä–∞–≤–∫–∞")
        self.dp.message.register(self.handle_cancel, F.text == "–û—Ç–º–µ–Ω–∞")

        self.dp.message.register(self.handle_poll_title_input, StateFilter(self.PollCreation.waiting_for_title))
        self.dp.message.register(self.handle_poll_options_input, StateFilter(self.PollCreation.waiting_for_options))
        self.dp.message.register(self.handle_poll_duration_input, StateFilter(self.PollCreation.waiting_for_duration))
        self.dp.message.register(self.handle_choose_poll, StateFilter(self.Voting.choosing_poll))
        self.dp.message.register(self.handle_choose_option, StateFilter(self.Voting.choosing_option))
        self.dp.message.register(self.handle_choose_poll_to_manage, StateFilter(self.PollManagement.choosing_poll))
        self.dp.message.register(self.handle_confirm_management, StateFilter(self.PollManagement.confirm_action))

        self.dp.message.register(self.handle_any_message)

    async def show_main_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard.get_start_keyboard())

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def cmd_start(self, message: types.Message):
        logger.log_message(message)
        await self.show_main_menu(message)

    async def handle_vote(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å'"""
        data = await state.get_data()
        user_id = data.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        poll_list = await self.fetch_active_polls()
        if not poll_list:
            await message.answer("‚è≥ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.")
            return

        polls_list = "\n".join(
            f"ID: {poll['id']} - {poll['title']} (–¥–æ {poll['end_time']})"
            for poll in poll_list
        )
        await message.answer(
            f"üìù –í—ã–±–µ—Ä–∏—Ç–µ ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n{polls_list}",
            reply_markup=keyboard.get_cancel_keyboard()
        )
        await state.set_state(self.Voting.choosing_poll)

    async def fetch_active_polls(self):
        async with self.pool.acquire() as conn:
            return await conn.fetch("SELECT * FROM polls WHERE is_active = TRUE AND end_time > NOW()")

    async def handle_delete(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å/–ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ'"""
        data = await state.get_data()
        user_id = data.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        polls_to_show = await self.fetch_user_polls(user_id)
        
        if not polls_to_show:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            return

        polls_list = "\n".join(
            f"ID: {poll['id']} - {poll['title']} (–¥–æ {poll['end_time']})"
            for poll in polls_to_show
        )
        await message.answer(f"–í–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n{polls_list}", reply_markup=keyboard.get_cancel_keyboard())
        await state.set_state(self.PollManagement.choosing_poll)

    async def fetch_user_polls(self, user_id):
        async with self.pool.acquire() as conn:
            return await conn.fetch("SELECT * FROM polls WHERE creator_id = $1", user_id)

    async def handle_choose_poll_to_manage(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        data = await state.get_data()
        user_id = data.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_admin = data.get('is_admin', False)

        try:
            poll_id = int(message.text)
            poll = await self.fetch_poll(poll_id)

            if not poll:
                raise ValueError("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            if not is_admin and poll['creator_id'] != user_id:
                raise ValueError("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º")

            status_msg = "üî¥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" if not poll['is_active'] else "üü¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"

            await message.answer(
                f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #{poll_id}: {poll['title']}\n{status_msg}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard.get_confirm_keyboard()
            )

            await state.update_data(poll_id=poll_id)
            await state.set_state(self.PollManagement.confirm_action)

        except ValueError as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
            await state.clear()

    async def fetch_poll(self, poll_id):
        async with self.pool.acquire() as conn:
            return await conn.fetchrow("SELECT * FROM polls WHERE id = $1", poll_id)

    async def handle_confirm_management(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        logger.log_message(message)
        data = await state.get_data()
        poll_id = data.get('poll_id')
        user_id = data.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_admin = data.get('is_admin', False)

        if not poll_id:
            await message.answer("–û—à–∏–±–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
            await state.clear()
            return

        poll = self.active_polls.get(poll_id)

        if not poll:
            await message.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        elif not is_admin and poll['creator_id'] != user_id:
            await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º")
        else:
            if message.text == "–£–¥–∞–ª–∏—Ç—å":
                # –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                del self.active_polls[poll_id]
                await message.answer(
                    f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #{poll_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ.",
                    reply_markup=keyboard.get_start_keyboard()

                )
            elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
                if datetime.now() > poll['end_time']:
                    await message.answer("–≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                else:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤
                    poll['end_time'] = datetime.now()
                    self.archived_polls[poll_id] = poll
                    del self.active_polls[poll_id]
                    await message.answer(
                        f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ #{poll_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {poll['title']}\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                        reply_markup=keyboard.get_start_keyboard()
                    )
            elif message.text == "–û—Ç–º–µ–Ω–∞":
                await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard.get_start_keyboard())

        await state.clear()

    async def delete_poll(self, poll_id):
        async with self.pool.acquire() as conn:
            await conn.execute("DELETE FROM polls WHERE id = $1", poll_id)

    async def end_poll(self, poll_id):
        async with self.pool.acquire() as conn:
            await conn.execute("UPDATE polls SET is_active = FALSE WHERE id = $1", poll_id)

    async def handle_create_poll(self, message: types.Message, state: FSMContext):
        user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = message.from_user.username  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard.get_cancel_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        await state.set_state(self.PollCreation.waiting_for_title)

    async def handle_poll_title_input(self, message: types.Message, state: FSMContext):
        if len(message.text) > 200:
            await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        await state.update_data(title=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–∞ –ù–µ—Ç –í–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è)",
            reply_markup=keyboard.get_cancel_keyboard()
        )
        await state.set_state(self.PollCreation.waiting_for_options)

    async def handle_poll_options_input(self, message: types.Message, state: FSMContext):
        options = message.text.split()
        if len(options) < 2:
            await message.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!")
            return
        if len(options) > 10:
            await message.answer("–ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞!")
            return

        await state.update_data(options=options)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —á–∞—Å–∞—Ö (1-720):", reply_markup=keyboard.get_cancel_keyboard())
        await state.set_state(self.PollCreation.waiting_for_duration)


    async def upsert_user(self, telegram_id: int, username: str = None):
        async with self.pool.acquire() as conn:
            await conn.execute(
                '''
                INSERT INTO users (telegram_id, username) 
                VALUES ($1, $2)
                ON CONFLICT (telegram_id) DO UPDATE SET username = EXCLUDED.username
                ''',
                telegram_id,
                username
            )

    async def handle_poll_duration_input(self, message: types.Message, state: FSMContext):
        try:
            duration = int(message.text)
            if not 1 <= duration <= 720:
                raise ValueError
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 720")
            return

        poll_data = await state.get_data()
        user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
        username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username (–º–æ–∂–µ—Ç –±—ã—Ç—å None)

        end_time = datetime.now() + timedelta(hours=duration)

        async with self.pool.acquire() as conn:
            # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ
            await self.upsert_user(user_id, username)

            poll_id = await conn.fetchval(
                '''
                INSERT INTO polls (title, creator_id, end_time, is_active)
                VALUES ($1, $2, $3, TRUE) RETURNING id
                ''',
                poll_data['title'],      # –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                user_id,                 # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                end_time                 # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            )

            await message.answer(
                f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                f"ID: #{poll_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {poll_data['title']}\n"
                f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(poll_data['options'])}\n"
                f"–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_time.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=keyboard.get_start_keyboard()
            )
            await state.clear()

    async def handle_choose_poll(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        data = await state.get_data()
        user_id = data.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        try:
            poll_id = int(message.text)
            poll = await self.fetch_poll(poll_id)

            if not poll:
                raise ValueError

            if not poll['is_active']:
                await message.answer("‚è∞ –≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                await state.clear()
                return

            await state.update_data(poll_id=poll_id)
            options = await self.fetch_poll_options(poll_id)
            options_list = [option['option_text'] for option in options]
            await message.answer(
                f"üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {poll['title']}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=keyboard.get_poll_options_keyboard(options_list)
            )
            await state.set_state(self.Voting.choosing_option)

        except ValueError:
            await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")

    async def fetch_poll_options(self, poll_id):
        async with self.pool.acquire() as conn:
            return await conn.fetch("SELECT * FROM poll_options WHERE poll_id = $1", poll_id)

    async def handle_choose_option(self, message: types.Message, state: FSMContext):
        data = await state.get_data()
        poll_id = data['poll_id']

        options = await self.fetch_poll_options(poll_id)
        if message.text not in [option['option_text'] for option in options]:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
            return

        async with self.pool.acquire() as conn:
            await conn.execute(
                '''
                INSERT INTO votes (poll_id, user_id, option_id)
                VALUES ($1, $2, $3)
                ON CONFLICT (poll_id, user_id) DO NOTHING
                ''',
                poll_id,
                message.from_user.id,     # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ message
                message.text               # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å option_id, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            )

        await message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –≥–æ–ª–æ—Å '{message.text}' –∑–∞—Å—á–∏—Ç–∞–Ω.", reply_markup=keyboard.get_start_keyboard())
        await state.clear()

    async def handle_cancel(self, message: types.Message, state: FSMContext):
        logger.log_message(message)
        await state.clear()
        await self.show_main_menu(message)

    async def handle_statistika(self, message: types.Message):
        logger.log_message(message)

        all_polls = {**self.active_polls, **self.archived_polls}

        if not all_polls:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.")
            return

        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:\n\n"

        for poll_id, poll in all_polls.items():
            total_votes = sum(poll['votes'].values())
            end_time = poll['end_time']
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–æ" if poll_id in self.active_polls else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"

            if total_votes > 0:
                options_stats = "\n".join(
                    f"  ‚Ä¢ {option}: {votes} ({votes / total_votes * 100:.1f}%)"
                    for option, votes in poll['votes'].items()
                )
            else:
                options_stats = "\n".join(
                    f"  ‚Ä¢ {option}: {votes} (0%)"
                    for option, votes in poll['votes'].items()
                )

            response += (
                f"üìå #{poll_id}: {poll['title']}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {end_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_votes}\n"
                f"{options_stats}\n\n"
            )

        await message.answer(response)
        await self.show_main_menu(message)

    async def count_votes(self, poll_id):
        async with self.pool.acquire() as conn:
            return await conn.fetchval('SELECT COUNT(*) FROM votes WHERE poll_id = $1', poll_id)
        
    async def handle_help(self, message: types.Message):
        logger.log_message(message)
        await message.answer("–°–ø—Ä–∞–≤–∫–∞:\n" + "\n".join(config.AVAILABLE_COMMANDS))
        await self.show_main_menu(message)

    async def handle_any_message(self, message: types.Message):
        logger.log_message(message)

    async def run(self):
        await self.init_db()
        print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        try:
            await self.dp.start_polling(self.bot)
        finally:
            await self.close_db()