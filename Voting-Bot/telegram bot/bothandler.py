import os
import sys
from datetime import datetime, timedelta
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from config import config
from keyboard import keyboard
from logger import logger
from dotenv import load_dotenv


class bothandler:
    class PollCreation(StatesGroup):
        waiting_for_title = State()
        waiting_for_options = State()
        waiting_for_duration = State()

    class Voting(StatesGroup):
        choosing_poll = State()
        choosing_option = State()

    def __init__(self):
        if not config.BOT_TOKEN:
            print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª bot_token.txt —Å —Ç–æ–∫–µ–Ω–æ–º")
            sys.exit(1)

        self.bot = Bot(token=config.BOT_TOKEN)
        self.dp = Dispatcher()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db_pool = None
        self.init_db()

        self.active_polls = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
        self._register_handlers()

    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.db_pool = await asyncpg.create_pool(
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD'),
            database=os.getenv('DB_NAME'),
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT')
        )

    def _register_handlers(self):
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.handle_delete, F.text == "–£–¥–∞–ª–∏—Ç—å")
        self.dp.message.register(self.handle_create_poll, F.text == "–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
        self.dp.message.register(self.handle_vote, F.text == "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å")
        self.dp.message.register(self.handle_statistika, F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.dp.message.register(self.handle_help, F.text == "–°–ø—Ä–∞–≤–∫–∞")
        self.dp.message.register(self.handle_cancel, F.text == "–û—Ç–º–µ–Ω–∞")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.dp.message.register(
            self.handle_poll_title_input,
            StateFilter(self.PollCreation.waiting_for_title)
        )
        self.dp.message.register(
            self.handle_poll_options_input,
            StateFilter(self.PollCreation.waiting_for_options)
        )
        self.dp.message.register(
            self.handle_poll_duration_input,
            StateFilter(self.PollCreation.waiting_for_duration)
        )
        self.dp.message.register(
            self.handle_choose_poll,
            StateFilter(self.Voting.choosing_poll)
        )
        self.dp.message.register(
            self.handle_choose_option,
            StateFilter(self.Voting.choosing_option)
        )

        self.dp.message.register(self.handle_any_message)

    async def show_main_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.get_start_keyboard()
        )

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def cmd_start(self, message: types.Message):
        logger.log_message(message)
        await self.show_main_menu(message)

    async def handle_delete(self, message: types.Message):
        logger.log_message(message)
        await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å'")
        await self.show_main_menu(message)

    # –°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    async def handle_vote(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å'"""
        logger.log_message(message)

        self.active_polls = await self.fetch_active_polls()

        if not self.active_polls:
            await message.answer("‚è≥ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π.")
            await self.show_main_menu(message)
            return

        polls_list = "\n".join(
            f"ID: {poll['id']} - {poll['title']} (–¥–æ {poll['end_time'].strftime('%d.%m.%Y %H:%M')})"
            for poll in self.active_polls
        )

        await message.answer(
            f"üìù –í—ã–±–µ—Ä–∏—Ç–µ ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n{polls_list}",
            reply_markup=keyboard.get_cancel_keyboard()
        )
        await state.set_state(self.Voting.choosing_poll)

    async def fetch_active_polls(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with self.db_pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT id, title, end_time FROM polls WHERE is_active = TRUE
            """)
            return [{'id': row['id'], 'title': row['title'], 'end_time': row['end_time']} for row in rows]

    async def handle_choose_poll(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ø–æ ID"""
        try:
            poll_id = int(message.text)
            poll = await self.fetch_poll(poll_id)

            if not poll:
                await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
                return
            
            if datetime.now() > poll['end_time']:
                await message.answer("‚è∞ –≠—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                await state.clear()
                return
            
            if message.from_user.id in poll['voted_users']:
                await message.answer("‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ.")
                await state.clear()
                return

            await state.update_data(poll_id=poll_id)
            await message.answer(
                f"üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {poll['title']}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=keyboard.get_poll_options_keyboard(poll['options'])
            )
            await state.set_state(self.Voting.choosing_option)

        except ValueError:
            await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
            return

    async def fetch_poll(self, poll_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –ø–æ ID"""
        async with self.db_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT * FROM polls WHERE id = $1", poll_id)
            return row

    async def handle_choose_option(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        data = await state.get_data()
        poll_id = data['poll_id']
        poll = await self.fetch_poll(poll_id)

        if message.text not in poll['options']:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
                reply_markup=keyboard.get_poll_options_keyboard(poll['options'])
            )
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.save_vote(poll_id, message.text, message.from_user.id)

        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –≥–æ–ª–æ—Å '{message.text}' –∑–∞—Å—á–∏—Ç–∞–Ω.",
            reply_markup=keyboard.get_start_keyboard()
        )
        await state.clear()

    async def save_vote(self, poll_id, option_text, user_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –≤ –ë–î"""
        async with self.db_pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO votes (poll_id, user_id, option_id)
                VALUES ($1, $2, (SELECT id FROM poll_options WHERE poll_id = $1 AND option_text = $3))
                ON CONFLICT (poll_id, user_id) DO NOTHING
            """, poll_id, user_id, option_text)

    # –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
    async def handle_create_poll(self, message: types.Message, state: FSMContext):
        logger.log_message(message)

        if not await self._check_admin_rights(message):
            await self.show_main_menu(message)
            return

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard.get_cancel_keyboard()
        )
        await state.set_state(self.PollCreation.waiting_for_title)

    async def handle_poll_title_input(self, message: types.Message, state: FSMContext):
        logger.log_message(message)
        if len(message.text) > 200:
            await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        await state.update_data(title=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–∞ –ù–µ—Ç –í–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è)",
            reply_markup=keyboard.get_cancel_keyboard()
        )
        await state.set_state(self.PollCreation.waiting_for_options)

    async def handle_poll_options_input(self, message: types.Message, state: FSMContext):
        options = message.text.split()
        logger.log_message(message)
        if len(options) < 2:
            await message.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!")
            return

        if len(options) > 10:
            await message.answer("–ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞!")
            return

        await state.update_data(options=options)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —á–∞—Å–∞—Ö (1-720):",
            reply_markup=keyboard.get_cancel_keyboard()
        )
        await state.set_state(self.PollCreation.waiting_for_duration)

    async def handle_poll_duration_input(self, message: types.Message, state: FSMContext):
        try:
            duration = int(message.text)
            logger.log_message(message)
            if not 1 <= duration <= 720:  # –û—Ç 1 —á–∞—Å–∞ –¥–æ 30 –¥–Ω–µ–π
                raise ValueError
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 720")
            return

        poll_data = await state.get_data()
        end_time = datetime.now() + timedelta(hours=duration)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–æ—Å –≤ –ë–î
        async with self.db_pool.acquire() as conn:
            poll_id = await conn.fetchval("""
                INSERT INTO polls (question, created_by, ends_at)
                VALUES ($1, $2, $3) RETURNING id
            """, poll_data['title'], message.from_user.id, end_time)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            for option in poll_data['options']:
                await conn.execute("""
                    INSERT INTO poll_options (poll_id, option_text)
                    VALUES ($1, $2)
                """, poll_id, option)

        await message.answer(
            f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"ID: #{poll_id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {poll_data['title']}\n"
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(poll_data['options'])}\n"
            f"–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_time.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard.get_start_keyboard()
        )
        await state.clear()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    async def handle_cancel(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'"""
        logger.log_message(message)
        current_state = await state.get_state()
        if current_state:
            logger.log_vote_attempt(message.from_user.id,
                                    f"–û—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ {current_state.split(':')[-1]}")
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await state.clear()
        await self.show_main_menu(message)

    # –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async def handle_statistika(self, message: types.Message):
        logger.log_message(message)

        if not self.active_polls:
            await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.")
            return

        response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:\n\n"

        for poll_id in self.active_polls.keys():
            poll = await self.fetch_poll(poll_id)
            total_votes = sum(poll['votes'].values())
            end_time = poll['end_time']
            time_left = end_time - datetime.now()

            if time_left.total_seconds() > 0:
                time_str = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {str(time_left).split('.')[0]}"
            else:
                time_str = "üî¥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

            options_stats = await self.calculate_votes_stats(poll_id)

            response += (
                f"üìå #{poll_id}: {poll['title']}\n"
                f"{time_str}\n"
                f"üó≥ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_votes}\n"
                f"{options_stats}\n\n"
            )

        await message.answer(response)
        await self.show_main_menu(message)

    async def calculate_votes_stats(self, poll_id):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤ –ø–æ –æ–ø—Ü–∏–∏–º"""
        async with self.db_pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT option_text, COUNT(votes.id) AS vote_count
                FROM poll_options
                LEFT JOIN votes ON poll_options.id = votes.option_id
                WHERE poll_options.poll_id = $1
                GROUP BY option_text
            """, poll_id)

            stats = []
            for row in rows:
                stats.append(f"  ‚Ä¢ {row['option_text']}: {row['vote_count']}")

            return "\n".join(stats)

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def _check_admin_rights(self, message: types.Message) -> bool:
        if message.from_user.id not in config.ADMIN_IDS:
            await message.answer("‚õî –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            return False
        return True

    async def handle_help(self, message: types.Message):
        logger.log_message(message)
        await message.answer("–°–ø—Ä–∞–≤–∫–∞:\n" + "\n".join(config.AVAILABLE_COMMANDS))
        await self.show_main_menu(message)

    async def handle_any_message(self, message: types.Message):
        logger.log_message(message)

    async def run(self):
        print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        await self.dp.start_polling(self.bot)