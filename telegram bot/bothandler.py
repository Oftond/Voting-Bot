# import logging
# from telegram import Update
# from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
# import psycopg2
# from psycopg2 import sql
# from aiogram import Bot, Dispatcher, types, F
# from aiogram.filters import Command, StateFilter
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import StatesGroup, State
# from config import config
# from keyboard import keyboard
# from logger import logger
# from datetime import datetime, timedelta
# from bdConn import get_db_connection


# class bothandler:
#     class PollCreation(StatesGroup):
#         waiting_for_title = State()
#         waiting_for_options = State()
#         waiting_for_duration = State()

#     def __init__(self):
#         self.bot = Bot(token=config.BOT_TOKEN)
#         self.dp = Dispatcher()
#         self._register_handlers()
#         self.active_polls = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

#     def _register_handlers(self):
#         self.dp.message.register(self.cmd_start, Command("start"))
#         self.dp.message.register(self.handle_delete, F.text == "–£–¥–∞–ª–∏—Ç—å")
#         self.dp.message.register(self.handle_create_poll, F.text == "–°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
#         self.dp.message.register(self.handle_statistika, F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
#         self.dp.message.register(self.handle_help, F.text == "–°–ø—Ä–∞–≤–∫–∞")
#         self.dp.message.register(self.handle_cancel, F.text == "–û—Ç–º–µ–Ω–∞")
#         self.dp.message.register(
#             self.handle_poll_title_input,
#             StateFilter(self.PollCreation.waiting_for_title)
#         )
#         self.dp.message.register(
#             self.handle_poll_options_input,
#             StateFilter(self.PollCreation.waiting_for_options)
#         )
#         self.dp.message.register(
#             self.handle_poll_duration_input,
#             StateFilter(self.PollCreation.waiting_for_duration)
#         )
#         self.dp.message.register(self.handle_any_message)

#     # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
#     async def cmd_start(self, message: types.Message, update: Update, context: CallbackContext) -> None:
#         logger.log_message(message)
#         conn = get_db_connection()
#         with conn:
#             with conn.cursor() as cursor:
#                 cursor.execute(sql.SQL("INSERT INTO users (telegram_id, username) VALUES (%s, %s) ON CONFLICT (telegram_id) DO NOTHING;"),
#                             [user.id, user.username])
#         conn.close()
#         await message.answer(
#             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             reply_markup=keyboard.get_start_keyboard()        
#         )

#     async def handle_delete(self, message: types.Message):
#         logger.log_message(message)
#         await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–£–¥–∞–ª–∏—Ç—å'")

#     # –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
#     async def handle_create_poll(self, message: types.Message, state: FSMContext, update: Update, context: CallbackContext) -> None:
#         logger.log_message(message)

#         if not await self._check_admin_rights(message):
#             return

#         await message.answer(
#             "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
#             reply_markup=keyboard.get_cancel_keyboard()
#         )
#         await state.set_state(self.PollCreation.waiting_for_title)

        

    

#     async def handle_poll_title_input(self, message: types.Message, state: FSMContext):
#         if len(message.text) > 200:
#             await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤)")
#             return

#         await state.update_data(title=message.text)
#         await message.answer(
#             "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–∞ –ù–µ—Ç –í–æ–∑–¥–µ—Ä–∂–∞–ª—Å—è)",
#             reply_markup=keyboard.get_cancel_keyboard()
#         )
#         await state.set_state(self.PollCreation.waiting_for_options)

#     async def handle_poll_options_input(self, message: types.Message, state: FSMContext):
#         options = message.text.split()

#         if len(options) < 2:
#             await message.answer("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!")
#             return

#         if len(options) > 10:
#             await message.answer("–ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞!")
#             return

#         await state.update_data(options=options)
#         await message.answer(
#             "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ —á–∞—Å–∞—Ö (1-720):",
#             reply_markup=keyboard.get_cancel_keyboard()
#         )
#         await state.set_state(self.PollCreation.waiting_for_duration)

#     async def handle_poll_duration_input(self, message: types.Message, state: FSMContext):
#         try:
#             duration = int(message.text)
#             if not 1 <= duration <= 720:  # –û—Ç 1 —á–∞—Å–∞ –¥–æ 30 –¥–Ω–µ–π
#                 raise ValueError
#         except ValueError:
#             await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 720")
#             return

#         poll_data = await state.get_data()
#         end_time = datetime.now() + timedelta(hours=duration)

#         # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±—ç–∫–µ–Ω–¥–æ–º
#         poll_id = len(self.active_polls) + 1
#         self.active_polls[poll_id] = {
#             'title': poll_data['title'],
#             'options': poll_data['options'],
#             'creator_id': message.from_user.id,
#             'end_time': end_time,
#             'votes': {option: 0 for option in poll_data['options']}
#         }

#         await message.answer(
#             f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
#             f"ID: #{poll_id}\n"
#             f"–ù–∞–∑–≤–∞–Ω–∏–µ: {poll_data['title']}\n"
#             f"–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(poll_data['options'])}\n"
#             f"–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_time.strftime('%d.%m.%Y %H:%M')}",
#             reply_markup=keyboard.get_start_keyboard()
#         )
#         await state.clear()

#     async def handle_cancel(self, message: types.Message, state: FSMContext):
#         logger.log_message(message)
#         current_state = await state.get_state()
#         if current_state is None:
#             return

#         await state.clear()
#         await message.answer(
#             "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
#             reply_markup=keyboard.get_start_keyboard()
#         )

#     # –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#     async def handle_statistika(self, message: types.Message):
#         logger.log_message(message)

#         if not self.active_polls:
#             await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.")
#             return

#         response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:\n\n"

#         for poll_id, poll in self.active_polls.items():
#             total_votes = sum(poll['votes'].values())
#             end_time = poll['end_time']
#             time_left = end_time - datetime.now()

#             # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
#             if time_left.total_seconds() > 0:
#                 time_str = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {str(time_left).split('.')[0]}"
#             else:
#                 time_str = "üî¥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
#             if total_votes > 0:
#                 options_stats = "\n".join(
#                     f"  ‚Ä¢ {option}: {votes} ({votes / total_votes * 100:.1f}%)"
#                     for option, votes in poll['votes'].items()
#                 )
#             else:
#                 options_stats = "\n".join(
#                     f"  ‚Ä¢ {option}: {votes} (0%)"
#                     for option, votes in poll['votes'].items()
#                 )

#             response += (
#                 f"üìå #{poll_id}: {poll['title']}\n"
#                 f"{time_str}\n"
#                 f"üó≥ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_votes}\n"
#                 f"{options_stats}\n\n"
#             )

#         await message.answer(response)
#     # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
#     async def _check_admin_rights(self, message: types.Message) -> bool:
#         if message.from_user.id not in config.ADMIN_IDS:
#             await message.answer("‚õî –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
#             return False
#         return True

#     async def handle_help(self, message: types.Message):
#         logger.log_message(message)
#         await message.answer("–°–ø—Ä–∞–≤–∫–∞:\n" + "\n".join(config.AVAILABLE_COMMANDS))

#     async def handle_any_message(self, message: types.Message):
#         logger.log_message(message)

#     async def run(self):
#         print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
#         await self.dp.start_polling(self.bot)